const CustomerService = require('./services/customerService');
const BankService = require('./services/bankService');
const BankManagerService = require('./services/bankManagerService');
const Account = require('./models/account');

// H√†m hi·ªÉn th·ªã l·ªói trong table ƒë·∫πp
function displayError(errorType, errorMessage, details = {}) {
    console.table([{
        'üö® Lo·∫°i l·ªói': errorType,
        '‚ùå Th√¥ng b√°o': errorMessage,
        'üìç Chi ti·∫øt': details.details || 'N/A',
        'üí∞ S·ªë ti·ªÅn': details.amount ? details.amount.toLocaleString() + ' VND' : 'N/A',
        'üì± T√†i kho·∫£n': details.accountId || 'N/A',
        '‚è∞ Th·ªùi gian': new Date().toLocaleTimeString()
    }]);
}

// M·∫£ng l∆∞u tr·ªØ l·ªãch s·ª≠ giao d·ªãch
const transactionLog = [];

// H√†m log giao d·ªãch th√†nh c√¥ng
function logTransaction(type, from, to, amount, description) {
    transactionLog.push({
        'üîÑ Lo·∫°i': type,
        'üì§ T·ª´': from,
        'üì• ƒê·∫øn': to,
        'üí∞ S·ªë ti·ªÅn': amount.toLocaleString() + ' VND',
        'üìù M√¥ t·∫£': description,
        '‚è∞ Th·ªùi gian': new Date().toLocaleTimeString()
    });
}

// H√†m hi·ªÉn th·ªã table giao d·ªãch
function showTransactionTable(title) {
    console.log(`\nüìä ${title}:`);
    if (transactionLog.length > 0) {
        console.table(transactionLog);
        transactionLog.length = 0; // Clear log sau khi hi·ªÉn th·ªã
    } else {
        console.log('Kh√¥ng c√≥ giao d·ªãch n√†o ƒë∆∞·ª£c th·ª±c hi·ªán.');
    }
}

// T·∫°o h·ªá th·ªëng ng√¢n h√†ng v√† bank manager
const bank = new BankService();
const manager = new BankManagerService(bank);

// T·∫°o kh√°ch h√†ng 
const cus1 = CustomerService.createCustomer('cus-1', 'Nguyen Van An', 'an@gmail.com');
const cus2 = CustomerService.createCustomer('cus-2', 'Le Thi Binh', 'binh@gmail.com');
const cus3 = CustomerService.createCustomer('cus-3', 'Tran Minh Cuong', 'cuong@gmail.com');
const cus4 = CustomerService.createCustomer('cus-4', 'Pham Thi Dung', 'dung@gmail.com');

// T·∫°o th√™m t√†i kho·∫£n ph·ª• cho m·ªói kh√°ch h√†ng
const acc1_saving = new Account('acc1-saving');
const acc1_business = new Account('acc1-business');
const acc2_saving = new Account('acc2-saving');
const acc3_saving = new Account('acc3-saving');
const acc4_business = new Account('acc4-business');

// G·∫Øn ch·ªß s·ªü h·ªØu cho c√°c t√†i kho·∫£n ph·ª•
acc1_saving.customer = cus1;
acc1_business.customer = cus1;
acc2_saving.customer = cus2;
acc3_saving.customer = cus3;
acc4_business.customer = cus4;

// Th√™m t√†i kho·∫£n ph·ª• v√†o kh√°ch h√†ng
cus1.addAccount(acc1_saving);
cus1.addAccount(acc1_business);
cus2.addAccount(acc2_saving);
cus3.addAccount(acc3_saving);
cus4.addAccount(acc4_business);

// Th√™m kh√°ch h√†ng v√†o h·ªá th·ªëng
bank.addCustomer(cus1);
bank.addCustomer(cus2);
bank.addCustomer(cus3);
bank.addCustomer(cus4);




console.log('=== N·∫†P TI·ªÄN KH·ªûI T·∫†O ===');
try {
    // N·∫°p ti·ªÅn cho t√†i kho·∫£n ch√≠nh c·ªßa t·∫•t c·∫£ kh√°ch h√†ng
    CustomerService.deposit(cus1, 5000);
    logTransaction('DEPOSIT', 'External', 'An (Ch√≠nh)', 5000, 'N·∫°p ti·ªÅn kh·ªüi t·∫°o');

    CustomerService.deposit(cus2, 3000);
    logTransaction('DEPOSIT', 'External', 'Binh (Ch√≠nh)', 3000, 'N·∫°p ti·ªÅn kh·ªüi t·∫°o');

    CustomerService.deposit(cus3, 2000);
    logTransaction('DEPOSIT', 'External', 'Cuong (Ch√≠nh)', 2000, 'N·∫°p ti·ªÅn kh·ªüi t·∫°o');

    CustomerService.deposit(cus4, 4000);
    logTransaction('DEPOSIT', 'External', 'Dung (Ch√≠nh)', 4000, 'N·∫°p ti·ªÅn kh·ªüi t·∫°o');

    // N·∫°p ti·ªÅn cho t√†i kho·∫£n ph·ª•
    acc1_saving.deposit(10000);
    logTransaction('DEPOSIT', 'External', 'An (Ti·∫øt ki·ªám)', 10000, 'N·∫°p ti·ªÅn ti·∫øt ki·ªám');

    acc1_business.deposit(15000);
    logTransaction('DEPOSIT', 'External', 'An (Th∆∞∆°ng m·∫°i)', 15000, 'V·ªën kinh doanh');

    acc2_saving.deposit(7000);
    logTransaction('DEPOSIT', 'External', 'Binh (Ti·∫øt ki·ªám)', 7000, 'N·∫°p ti·ªÅn ti·∫øt ki·ªám');

    acc3_saving.deposit(8000);
    logTransaction('DEPOSIT', 'External', 'Cuong (Ti·∫øt ki·ªám)', 8000, 'N·∫°p ti·ªÅn ti·∫øt ki·ªám');

    acc4_business.deposit(12000);
    logTransaction('DEPOSIT', 'External', 'Dung (Th∆∞∆°ng m·∫°i)', 12000, 'V·ªën kinh doanh');

    // Test l·ªói: n·∫°p s·ªë ti·ªÅn √¢m
    acc1_saving.deposit(-500);
} catch (e) {
    displayError('L·ªñI N·∫†P TI·ªÄN', e.message, {
        details: 'Kh√¥ng th·ªÉ n·∫°p s·ªë ti·ªÅn √¢m',
        amount: -500,
        accountId: acc1_saving.id
    });
}
showTransactionTable('B·∫¢NG GIAO D·ªäCH N·∫†P TI·ªÄN KH·ªûI T·∫†O');

console.log('\nC√ÅC GIAO D·ªäCH R√öT TI·ªÄN');
try {
    // R√∫t ti·ªÅn b√¨nh th∆∞·ªùng
    CustomerService.withdraw(cus1, 1000);
    logTransaction('WITHDRAW', 'An (Ch√≠nh)', 'ATM', 1000, 'R√∫t ti·ªÅn m·∫∑t');

    acc1_saving.withdraw(2000);
    logTransaction('WITHDRAW', 'An (Ti·∫øt ki·ªám)', 'ATM', 2000, 'R√∫t ti·ªÅn ti·∫øt ki·ªám');

    acc2_saving.withdraw(1500);
    logTransaction('WITHDRAW', 'Binh (Ti·∫øt ki·ªám)', 'ATM', 1500, 'R√∫t ti·ªÅn m·∫∑t');

    CustomerService.withdraw(cus3, 500);
    logTransaction('WITHDRAW', 'Cuong (Ch√≠nh)', 'ATM', 500, 'R√∫t ti·ªÅn m·∫∑t');

    acc4_business.withdraw(3000);
    logTransaction('WITHDRAW', 'Dung (Th∆∞∆°ng m·∫°i)', 'Business', 3000, 'Chi ph√≠ kinh doanh');

    // Test l·ªói: r√∫t qu√° s·ªë d∆∞
    CustomerService.withdraw(cus2, 5000);
} catch (e) {
    displayError('L·ªñI R√öT TI·ªÄN', e.message, {
        details: 'Kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch',
        amount: 5000,
        accountId: cus2.accounts[0].id
    });
}
showTransactionTable('B·∫¢NG GIAO D·ªäCH R√öT TI·ªÄN');

console.log('\n CHUY·ªÇN KHO·∫¢N GI·ªÆA C√ÅC T√ÄI KHO·∫¢N ');
try {
    // Chuy·ªÉn kho·∫£n gi·ªØa t√†i kho·∫£n c·ªßa c√πng 1 ng∆∞·ªùi
    cus1.accounts[0].transferTo(acc1_saving, 500);
    logTransaction('TRANSFER', 'An (Ch√≠nh)', 'An (Ti·∫øt ki·ªám)', 500, 'Chuy·ªÉn ti·ªÅn ti·∫øt ki·ªám');

    acc1_business.transferTo(cus1.accounts[0], 2000);
    logTransaction('TRANSFER', 'An (Th∆∞∆°ng m·∫°i)', 'An (Ch√≠nh)', 2000, 'R√∫t l·ª£i nhu·∫≠n');

    // Chuy·ªÉn kho·∫£n gi·ªØa c√°c kh√°ch h√†ng kh√°c nhau  
    cus1.accounts[0].transferTo(cus2.accounts[0], 800);
    logTransaction('TRANSFER', 'An (Ch√≠nh)', 'Binh (Ch√≠nh)', 800, 'Chuy·ªÉn ti·ªÅn b·∫°n b√®');

    acc1_saving.transferTo(acc2_saving, 1000);
    logTransaction('TRANSFER', 'An (Ti·∫øt ki·ªám)', 'Binh (Ti·∫øt ki·ªám)', 1000, 'Cho vay ng·∫Øn h·∫°n');

    acc4_business.transferTo(cus3.accounts[0], 1500);
    logTransaction('TRANSFER', 'Dung (Th∆∞∆°ng m·∫°i)', 'Cuong (Ch√≠nh)', 1500, 'Thanh to√°n d·ªãch v·ª•');

    // Chuy·ªÉn kho·∫£n nhi·ªÅu ng∆∞·ªùi li√™n ti·∫øp (chu·ªói giao d·ªãch)
    cus2.accounts[0].transferTo(cus3.accounts[0], 600);
    logTransaction('TRANSFER', 'Binh (Ch√≠nh)', 'Cuong (Ch√≠nh)', 600, 'Chu·ªói giao d·ªãch 1');

    cus3.accounts[0].transferTo(acc3_saving, 1000);
    logTransaction('TRANSFER', 'Cuong (Ch√≠nh)', 'Cuong (Ti·∫øt ki·ªám)', 1000, 'Chu·ªói giao d·ªãch 2');

    acc3_saving.transferTo(cus4.accounts[0], 500);
    logTransaction('TRANSFER', 'Cuong (Ti·∫øt ki·ªám)', 'Dung (Ch√≠nh)', 500, 'Chu·ªói giao d·ªãch 3');

    // Test l·ªói: chuy·ªÉn kho·∫£n qu√° s·ªë d∆∞  
    acc2_saving.transferTo(acc4_business, 10000);
} catch (e) {
    displayError('L·ªñI CHUY·ªÇN KHO·∫¢N', e.message, {
        details: 'S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ chuy·ªÉn kho·∫£n',
        amount: 10000,
        accountId: acc2_saving.id
    });
}
showTransactionTable('B·∫¢NG GIAO D·ªäCH CHUY·ªÇN KHO·∫¢N');


console.log('\n GIAO D·ªäCH ƒêA D·∫†NG V√Ä PH·ª®C T·∫†P ');
try {
    // N·∫°p ti·ªÅn l∆∞∆°ng
    CustomerService.deposit(cus1, 8000);
    CustomerService.deposit(cus4, 6000);

    // Chuy·ªÉn ti·ªÅn cho gia ƒë√¨nh
    cus1.accounts[0].transferTo(cus2.accounts[0], 1200);
    cus4.accounts[0].transferTo(cus3.accounts[0], 800);

    // R√∫t ti·ªÅn ATM
    CustomerService.withdraw(cus2, 300);
    CustomerService.withdraw(cus3, 150);

    // Giao d·ªãch kinh doanh
    acc1_business.transferTo(acc4_business, 5000);
    acc4_business.transferTo(acc2_saving, 2000);

    // Ti·∫øt ki·ªám v√† ƒë·∫ßu t∆∞
    cus1.accounts[0].transferTo(acc1_saving, 3000);
    cus2.accounts[0].transferTo(acc2_saving, 1000);
    acc3_saving.transferTo(acc1_business, 1500);

    // Thanh to√°n h√≥a ƒë∆°n
    CustomerService.withdraw(cus1, 400);
    CustomerService.withdraw(cus2, 250);
    acc4_business.withdraw(1800);

} catch (e) {
    console.log('‚ùå L·ªói giao d·ªãch ƒëa d·∫°ng:', e.message);
}

console.log('\n TEST GI·ªöI H·∫†N V√Ä B·∫¢O M·∫¨T ');
try {
    // Test nhi·ªÅu giao d·ªãch li√™n ti·∫øp t·ª´ c√πng m·ªôt t√†i kho·∫£n
    CustomerService.withdraw(cus1, 100);
    CustomerService.withdraw(cus1, 200);
    CustomerService.withdraw(cus1, 150);

    // Test chuy·ªÉn kho·∫£n s·ªë ti·ªÅn l·ªõn
    acc1_saving.transferTo(acc4_business, 4000);

    // Test giao d·ªãch chu·ªói (A->B->C->A)
    cus2.accounts[0].transferTo(cus3.accounts[0], 500);
    cus3.accounts[0].transferTo(cus4.accounts[0], 300);
    cus4.accounts[0].transferTo(cus2.accounts[0], 200);

    // Test giao d·ªãch ƒë·ªìng th·ªùi t·ª´ nhi·ªÅu t√†i kho·∫£n c·ªßa c√πng kh√°ch h√†ng
    acc1_saving.withdraw(500);
    acc1_business.withdraw(800);
    CustomerService.deposit(cus1, 600);

    // Test c√°c tr∆∞·ªùng h·ª£p bi√™n
    CustomerService.withdraw(cus3, 1);
    acc2_saving.transferTo(acc3_saving, 1);

    // Test l·ªói: Giao d·ªãch kh√¥ng h·ª£p l·ªá
    CustomerService.withdraw(cus1, 0);
} catch (e) {
    console.log('‚ùå L·ªói test gi·ªõi h·∫°n:', e.message);
}

console.log('\n GIAO D·ªäCH KH·∫®N C·∫§P V√Ä ƒê·∫∂C BI·ªÜT');
try {
    // Tr∆∞·ªùng h·ª£p kh·∫©n c·∫•p: C·∫ßn ti·ªÅn g·∫•p
    acc1_saving.transferTo(cus1.accounts[0], 2500);
    cus1.accounts[0].transferTo(cus2.accounts[0], 2000);

    // Ho√†n tr·∫£ giao d·ªãch
    cus2.accounts[0].transferTo(cus1.accounts[0], 500);

    // Giao d·ªãch s·ªë ti·ªÅn l·ªõn gi·ªØa doanh nghi·ªáp
    acc1_business.transferTo(acc4_business, 3000);
    acc4_business.transferTo(acc1_business, 1000);

    // N·∫°p ti·ªÅn t·ª´ nhi·ªÅu ngu·ªìn
    CustomerService.deposit(cus3, 1500);
    acc3_saving.deposit(800);
    CustomerService.deposit(cus3, 600);

} catch (e) {
    console.log('‚ùå L·ªói giao d·ªãch kh·∫©n c·∫•p:', e.message);
}

// In ra b·∫£ng s·ªë d∆∞ c√°c t√†i kho·∫£n 
console.log('\nüìä B·∫¢NG S·ªê D∆Ø T·∫§T C·∫¢ T√ÄI KHO·∫¢N:');
console.table([
    { owner: 'An (Ch√≠nh)', id: cus1.accounts[0].id, balance: cus1.accounts[0].getBalance().toLocaleString() + ' VND' },
    { owner: 'An (Ti·∫øt ki·ªám)', id: acc1_saving.id, balance: acc1_saving.getBalance().toLocaleString() + ' VND' },
    { owner: 'An (Th∆∞∆°ng m·∫°i)', id: acc1_business.id, balance: acc1_business.getBalance().toLocaleString() + ' VND' },
    { owner: 'Binh (Ch√≠nh)', id: cus2.accounts[0].id, balance: cus2.accounts[0].getBalance().toLocaleString() + ' VND' },
    { owner: 'Binh (Ti·∫øt ki·ªám)', id: acc2_saving.id, balance: acc2_saving.getBalance().toLocaleString() + ' VND' },
    { owner: 'Cuong (Ch√≠nh)', id: cus3.accounts[0].id, balance: cus3.accounts[0].getBalance().toLocaleString() + ' VND' },
    { owner: 'Cuong (Ti·∫øt ki·ªám)', id: acc3_saving.id, balance: acc3_saving.getBalance().toLocaleString() + ' VND' },
    { owner: 'Dung (Ch√≠nh)', id: cus4.accounts[0].id, balance: cus4.accounts[0].getBalance().toLocaleString() + ' VND' },
    { owner: 'Dung (Th∆∞∆°ng m·∫°i)', id: acc4_business.id, balance: acc4_business.getBalance().toLocaleString() + ' VND' },
]);

console.log('\nüë§ TH·ªêNG K√ä THEO KH√ÅCH H√ÄNG:');
[cus1, cus2, cus3, cus4].forEach(customer => {
    const totalBalance = customer.accounts.reduce((sum, acc) => sum + acc.getBalance(), 0);
    const accountCount = customer.accounts.length;
    console.log(`${customer.name}: ${accountCount} t√†i kho·∫£n, T·ªïng: ${totalBalance.toLocaleString()} VND`);
});

console.log('\nüí≥ L·ªäCH S·ª¨ GIAO D·ªäCH C·ª¶A AN:');
console.table(cus1.accounts[0].getTransactions().map(tx => ({
    type: tx.type,
    amount: tx.amount.toLocaleString() + ' VND',
    from: tx.type === 'transfer' ? tx.fromAccount : '-',
    to: tx.type === 'transfer' ? tx.toAccount : '-',
    time: new Date(tx.date).toLocaleTimeString()
})));

console.log('\nüè¶ ===== B√ÅO C√ÅO BANK MANAGER =====');
console.log(`üí∞ T·ªïng s·ªë d∆∞ to√†n h·ªá th·ªëng: ${manager.viewTotalBalance().toLocaleString()} VND`);
console.log(`üë• T·ªïng s·ªë kh√°ch h√†ng: ${manager.viewAllCustomers().length} ng∆∞·ªùi`);
console.log(`üìÅ T·ªïng s·ªë t√†i kho·∫£n: ${manager.viewAllAccounts().length} t√†i kho·∫£n`);
console.log(`üìã T·ªïng s·ªë giao d·ªãch: ${manager.viewAllTransactions().length} giao d·ªãch`);

console.log('\nüìã T·∫§T C·∫¢ GIAO D·ªäCH TRONG H·ªÜ TH·ªêNG (10 giao d·ªãch g·∫ßn nh·∫•t):');
const allTransactions = manager.viewAllTransactions();
console.table(allTransactions.slice(-10).map((tx, index) => ({
    stt: index + 1,
    type: tx.type.toUpperCase(),
    amount: tx.amount.toLocaleString() + ' VND',
    from: tx.fromAccount || 'External',
    to: tx.toAccount || 'External',
    time: new Date(tx.date).toLocaleTimeString()
})));
